// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int         @id @default(autoincrement())
  username  String      @unique @db.VarChar(30)
  password  String      @db.VarChar(72)
  name      String      @db.VarChar(20)
  lastname  String      @db.VarChar(30)
  phone     String      @db.VarChar(10)
  email     String?
  todos     Todo[]
  role      Role
  Payment   Payment[]
  cart      Cart[]
  address   Address[]
  ordercart Ordercart[]

  @@map("users")
}

enum Role {
  ADMIN
  USER
  OFFICER
}

model Todo {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(150)
  status    Status   @default(PENDING)
  dueDate   DateTime @map("due_date") @db.Date
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("todos")
}

enum Status {
  PENDING
  DOING
  DONE
}

// model Orders {
//   id            Int         @id @default(autoincrement())
//   orderDate     DateTime
//   TotalAmount   Float
//   // user          User       @relation(fields: [UserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   UserId        Int
//   restaurants   Restaurants @relation(fields: [restaurantsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   restaurantsId Int
//   OrderDate     OrderDate[]
// }

model Product {
  id          Int         @id @default(autoincrement())
  ItemName    String
  price       Int
  description String
  stock       Int
  file        String
  cart        Cart[]
  ordercart   Ordercart[]
}

model Cart {
  id        Int     @id @default(autoincrement())
  total     Int
  price     Int
  user      User    @relation(fields: [UserId], references: [id])
  UserId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model Ordercart {
  id        Int     @id @default(autoincrement())
  price     Int
  total     Int
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int

  @@index([orderId])
}

model Order {
  id        Int         @id @default(autoincrement())
  total_all Int
  price_all Int
  status    String
  date      DateTime    @default(now())
  ordercart Ordercart[]
  Payment   Payment[]
}

model Reviews {
  id      Int    @id @default(autoincrement())
  rating  Int
  comment String
  // user          User       @relation(fields: [UserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  UserId  Int
}

// model Restaurants {
//   id       Int      @id @default(autoincrement())
//   password String?
//   location String   @db.VarChar(100)
//   Orders   Orders[]

//   Reviews Reviews[]
// }

// model OrderDate {
//   id        Int     @id @default(autoincrement())
//   quantity  Int
//   order     Orders  @relation(fields: [ordersId], references: [id])
//   ordersId  Int
//   Product   Product @relation(fields: [productId], references: [id])
//   productId Int
// }

model Payment {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status    String
  userId    Int
  pay       String
  addressId Int
  address   Address @relation(fields: [addressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  order Order @relation(fields: [orderId], references: [id])
  orderId   Int
}

model Address {
  id          Int       @id @default(autoincrement())
  name        String
  lastname    String
  phone       String
  province    String
  district    String
  tambon      String
  housenumber String
  village     String
  zipcode     String
  other       String
  user        User?     @relation(fields: [userId], references: [id])
  userId      Int?
  Payment     Payment[]
}
